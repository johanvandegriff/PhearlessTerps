

/*
 * constant table to hold the motor pwm and analog pin numbers
 * the two digital outputs and one digital input are connected to a shift register board
 * there is no setting for a motor direction, since that will be managed in the raspberry pi
 */
const int8_t motorPins[MAX_NUM_MOTORS][2] = {
// port  PWM    analog
  /*0*/{UNUSED, UNUSED},
  /*1*/{UNUSED, UNUSED},
  /*2*/{UNUSED, UNUSED},
  /*3*/{     6, UNUSED},
  /*4*/{     5,     A3},
  /*5*/{     4,     A2},
  /*6*/{     3,     A1},
  /*7*/{     2,     A0}
};

/*
 * holds the current states on the motors (not constant)
 * since the power ranges from 0-255, another variable is needed for the direction
 * 
 */
uint8_t motorStates[MAX_NUM_MOTORS][3] = {
// port  power  current direction  brake/coast
  /*0*/{     0,           FORWARD,      BRAKE},
  /*1*/{     0,           FORWARD,      BRAKE},
  /*2*/{     0,           FORWARD,      BRAKE},
  /*3*/{     0,           FORWARD,      BRAKE},
  /*4*/{     0,           FORWARD,      BRAKE},
  /*5*/{     0,           FORWARD,      BRAKE},
  /*6*/{     0,           FORWARD,      BRAKE},
  /*7*/{     0,           FORWARD,      BRAKE}
};

/*
 * current draw read from the analog pin for each motor, if available
 * ranges from 0-1024 (10 bits), and 0xffff (65535) for unknown value
 */
uint16_t motorCurrentDraw[MAX_NUM_MOTORS] = {
  UNKNOWN_CURRENT,
  UNKNOWN_CURRENT,
  UNKNOWN_CURRENT,
  UNKNOWN_CURRENT,
  UNKNOWN_CURRENT,
  UNKNOWN_CURRENT,
  UNKNOWN_CURRENT,
  UNKNOWN_CURRENT
};

/*
 * reading from the status flag through the shift registers
 * a LOW output means that there is an error, but the output is inverted before being stored here
 */
boolean motorStatusFlag[MAX_NUM_MOTORS] = {
  STATUS_OK,
  STATUS_OK,
  STATUS_OK,
  STATUS_OK,
  STATUS_OK,
  STATUS_OK,
  STATUS_OK,
  STATUS_OK
};


















/*
 * holds all the motors
 * if a motor is unused, set the PWM pin to NONE
 */
Motor motors[MAX_NUM_MOTORS] = {
//|port|PWM|analog |enc1 |enc2|pwr|brake|enc|draw|isOK|
  /*0*/{NONE, NONE, NONE, NONE, 0, true, 0, NONE, true},
  /*1*/{NONE, NONE, NONE, NONE, 0, true, 0, NONE, true},
  /*2*/{NONE, NONE, NONE, NONE, 0, true, 0, NONE, true},
  /*3*/{   6, NONE, NONE, NONE, 0, true, 0, NONE, true},
  /*4*/{   5,   A3, NONE, NONE, 0, true, 0, NONE, true},
  /*5*/{   4,   A2, NONE, NONE, 0, true, 0, NONE, true},
  /*6*/{   3,   A1, NONE, NONE, 0, true, 0, NONE, true},
  /*7*/{   2,   A0, NONE, NONE, 0, true, 0, NONE, true}
};

Servo servo0, servo1, servo2, servo3, servo4, servo5, servo6, servo7;
/*
 * holds all the servos
 * if a servo is unused, set the pin to NONE
 */
ServoControl servos[MAX_NUM_MOTORS] = {
//|port|Servo   |pin|pos|target|moveMask|done|
  /*0*/{servo0,    9, 0,    90,    0,    true},
  /*1*/{servo1, NONE, 0,    90,    0,    true},
  /*2*/{servo2, NONE, 0,    90,    0,    true},
  /*3*/{servo3, NONE, 0,    90,    0,    true},
  /*4*/{servo4, NONE, 0,    90,    0,    true},
  /*5*/{servo5, NONE, 0,    90,    0,    true},
  /*6*/{servo6, NONE, 0,    90,    0,    true},
  /*7*/{servo7, NONE, 0,    90,    0,    true},
};






//with encoders and analog
Motor(int8_t pwmPin, int8_t analogPin, int8_t encoderPin1, int8_t encoderPin2, boolean brake) {
  pwmPin = pwmPin;
  analogPin = analogPin;
  hasEncoder = false;
  encoderPin1 = InputPin(encoderPin1);
  encoderPin2 = InputPin(encoderPin2);
  power = 0;
  brake = brake;
  encoder = 0;
  currentDraw = NONE;
  isOK = true;
//  return {pwmPin, analogPin, true, InputPin(encoderPin1), InputPin(encoderPin2), 0, brake, 0, NONE, true};
}

//with encoders only
Motor(int8_t pwmPin, int8_t encoderPin1, int8_t encoderPin2, boolean brake) {
  pwmPin = pwmPin;
  analogPin = NONE;
  hasEncoder = false;
  encoderPin1 = InputPin(encoderPin1);
  encoderPin2 = InputPin(encoderPin2);
  power = 0;
  brake = brake;
  encoder = 0;
  currentDraw = NONE;
  isOK = true;
//  return {pwmPin, NONE, true, InputPin(encoderPin1), InputPin(encoderPin2), 0, brake, 0, NONE, true};
}

//with analog only
Motor(int8_t pwmPin, int8_t analogPin, boolean brake) {
  pwmPin = pwmPin;
  analogPin = analogPin;
  hasEncoder = false;
  encoderPin1 = NONE;
  encoderPin2 = NONE;
  power = 0;
  brake = brake;
  encoder = 0;
  currentDraw = NONE;
  isOK = true;
//  return {pwmPin, analogPin, false, NONE, NONE, 0, brake, 0, NONE, true};
}

//with neither encoders or analog
Motor(int8_t pwmPin, boolean brake) {
  pwmPin = pwmPin;
  analogPin = NONE;
  hasEncoder = false;
  encoderPin1 = NONE;
  encoderPin2 = NONE;
  power = 0;
  brake = brake;
  encoder = 0;
  currentDraw = NONE;
  isOK = true;
//  return {pwmPin, NONE, false, NONE, NONE, 0, brake, 0, NONE, true};
}

//no motor
Motor() {
  pwmPin = NONE;
  analogPin = NONE;
  hasEncoder = false;
  encoderPin1 = NONE;
  encoderPin2 = NONE;
  power = 0;
  brake = true;
  encoder = 0;
  currentDraw = NONE;
  isOK = true;
//  return {NONE, NONE, false, NONE, NONE, 0, true, 0, NONE, true};
}





=======Hardware.h==========
/*
   ServoControl
   controls the speed of a servo
*/
class ServoControl {
  public:
    Servo servo;
    /*
       Which pin the servo is connected to
    */
    signed pin : 8;
    /*
       The minimum microseconds to send the servo to set it to its minimum position
       0-2048, default = 1000
    */
    unsigned minMicros : 16;
    /*
       The maximum microseconds to send the servo to set it to its maximum position
       0-4096, default = 2000
    */
    unsigned maxMicros : 16;
    /*
       The last command sent to the servo
    */
    unsigned micros : 16;
    /*
       The current position of the servo in 1/8 degree ticks.
       0-1440, default = 360 (180 degrees with 1/8 degree precision)
    */
    unsigned position : 16;
    /*
       The target position where the servo is headed when using the speed control
       0-1440 (180 degrees with 1/8 degree precision)
    */
    unsigned target : 16;

    /*
       stores the last speed set for this servo
       prevents the moveMask from being recreated every time
    */
    unsigned speed : 8;
    /*
       A bitmask where each bit tells whether or not to increment the servo on that millisecond
       Every millisecond, the mask is checked, and if it is a 1 at that position, the servo increments 4 ticks (0.5 degrees)
    */
    uint64_t moveMask : 64;
    /*
       For speed control, tells whether the servo's position has reached its target
       0 = not done, 1 = done
    */
    unsigned isDone : 8;

    ServoControl(uint8_t pin1, uint16_t minMicros1, uint16_t maxMicros1, uint16_t position1);

    ServoControl(uint8_t pin1, uint16_t minMicros1, uint16_t maxMicros1);

    ServoControl(uint8_t pin1, uint16_t position1);

    ServoControl(uint8_t pin1);

    ServoControl();

    /*
       address   0-7     which servo
       position  0-1440  1/8 of a degree
    */
    boolean set(uint16_t position1);

    /*
       address   0-7     which servo
       position  0-1440  1/8 of a degree
       speed     1-64    ticks per 128 milliseconds

       a value of 0 for the speed will result in no command sent
       a value greater than 64 will call the other setServo function (max speed)
    */
    boolean set(uint16_t position1, uint8_t speed1);

    uint16_t calculateMicros();

    void update(uint64_t servoMask);

  private:
    void init();
};






=======Hardware.cpp==========
ServoControl::ServoControl(uint8_t pin1, uint16_t minMicros1, uint16_t maxMicros1, uint16_t position1) {
  Servo servo1;
  servo = servo1;
  pin = pin1;
  minMicros = minMicros1;
  maxMicros = maxMicros1;
  micros = SERVO_DEFAULT_MICROS;
  position = position1;
  target = position1;
  speed = 0;
  moveMask = 0;
  isDone = true;
  init();
}

ServoControl::ServoControl(uint8_t pin1, uint16_t minMicros1, uint16_t maxMicros1) {
  Servo servo1;
  servo = servo1;
  pin = pin1;
  minMicros = minMicros1;
  maxMicros = maxMicros1;
  position = SERVO_DEFAULT_POSITION;
  target = SERVO_DEFAULT_POSITION;
  speed = 0;
  moveMask = 0;
  isDone = true;
  init();
}

ServoControl::ServoControl(uint8_t pin1, uint16_t position1) {
  Servo servo1;
  servo = servo1;
  pin = pin1;
  minMicros = SERVO_DEFAULT_MIN_MICROS;
  maxMicros = SERVO_DEFAULT_MAX_MICROS;
  position = position1;
  target = SERVO_DEFAULT_POSITION;
  speed = 0;
  moveMask = 0;
  isDone = true;
  init();
}

ServoControl::ServoControl(uint8_t pin1) {
  Servo servo1;
  servo = servo1;
  pin = pin1;
  minMicros = SERVO_DEFAULT_MIN_MICROS;
  maxMicros = SERVO_DEFAULT_MAX_MICROS;
  position = SERVO_DEFAULT_POSITION;
  target = SERVO_DEFAULT_POSITION;
  speed = 0;
  moveMask = 0;
  isDone = true;
  init();
}

ServoControl::ServoControl() {
  Servo servo1;
  servo = servo1;
  pin = NONE;
  minMicros = SERVO_DEFAULT_MIN_MICROS;
  maxMicros = SERVO_DEFAULT_MAX_MICROS;
  position = SERVO_DEFAULT_POSITION;
  target = SERVO_DEFAULT_POSITION;
  speed = 0;
  moveMask = 0;
  isDone = true;
  init();
}

void ServoControl::init() {
  if (pin != NONE) {
    servo.attach(pin);
    servo.writeMicroseconds(micros);
  }
}

/*
   address   0-7     which servo
   position  0-1440  1/8 of a degree
*/
boolean ServoControl::set(uint16_t position1) {
  //  if (address >= MAX_NUM_MOTORS) return false;
  //the servo must be attached
  if (pin == NONE) return false;

  if (position1 > SERVO_TICKS_PER_RANGE) position1 = SERVO_TICKS_PER_RANGE;

  //set the position and target position to the same thing
  target = position1;
  position = position1;

  //the mask will not be checked anyway
  moveMask = 0;

  //the servo is at its target
  isDone = true;

  return true;
}

/*
   address   0-7     which servo
   position  0-1440  1/8 of a degree
   speed     1-64    ticks per 128 milliseconds

   a value of 0 for the speed will result in no command sent
   a value greater than 64 will call the other setServo function (max speed)
*/
boolean ServoControl::set(uint16_t position1, uint8_t speed1) {
  //speed cannot be 0
  if (speed1 == 0) return false;
  //  if (speed == 0 || address >= MAX_NUM_MOTORS) return false;

  //anything higher than 64 is faster than the servo can go
  if (speed1 > 64) speed1 = 64;

  //the servo must be attached
  if (pin == NONE) return false;

  if (position1 > SERVO_TICKS_PER_RANGE) position1 = SERVO_TICKS_PER_RANGE;

  //set the target
  target = position1;
  isDone = (position == target);

  if (speed != speed1) {
    speed = speed1;

    //set moveMask to have evenly spaced bits set
    //the total number of bits set is equal to the speed
    uint64_t servoMoveMask = 0;
    uint64_t mask = 1;
    uint8_t j = 0, oldJ = 255;
    for (uint8_t i = 0; i < 64; i++) {
      j = i * speed1 / 64;
      if (j != oldJ ) {
        servoMoveMask |= mask;
        oldJ = j;
      }
      mask = mask << 1;
    }
    moveMask = servoMoveMask;
  }
  return true;
}


uint16_t ServoControl::calculateMicros() {
  return constrain(map(position, 0, SERVO_TICKS_PER_RANGE, minMicros, maxMicros), minMicros, maxMicros);
}

void ServoControl::update(uint64_t servoMask) {
  //12 us
  //update servo
  //note: delta time is always 1 millisecond
  //if it is time to update the servos (see above) and the servo position is not at the target
  //and the servo is set to move on this tick based on the moveMask
  if ((position != target) && (moveMask & servoMask)) {
    //move the servo 1 step toward the target
    if (position > target) {
      position -= min(SERVO_INC_PER_MILLI, position - target);
    } else {
      position += min(SERVO_INC_PER_MILLI, target - position);
    }
  }
  //send the command to the Servo library
  uint16_t micros1 = calculateMicros();
  if (micros1 != micros) {
    micros = micros1;
    servo.writeMicroseconds(micros);
  }
  //record whether or not the servo is done for external purposes
  isDone = (position == target);
}
